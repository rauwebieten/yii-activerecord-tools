<?php


namespace rauwebieten\yiiactiverecordtools\components;


use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpFile;
use Nette\PhpGenerator\PhpNamespace;
use yii\base\Component;
use yii\console\Controller;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;
use yii\db\Connection;
use yii\helpers\Console;
use yii\helpers\FileHelper;
use yii\helpers\Inflector;

abstract class AbstractModelGenerator extends Component
{
    public $db = 'db';
    public $baseNamespace = 'app\models';
    public $baseClass = ActiveRecord::class;
    public $baseQueryClass = ActiveQuery::class;

    /** @var Controller */
    public $console;

    /** @var Connection */
    protected $db_conn;

    protected $map;

    private $schemas;

    public function __construct($config = [])
    {
        parent::__construct($config);
    }

    public function init()
    {
        parent::init();
        $this->db_conn = \Yii::$app->get($this->db);
    }

    public function run()
    {
        $this->createMap();
        $this->makeAbstractModelClasses();
        $this->writeAllFiles();
    }

    protected function classify($v)
    {
        return Inflector::camelize(Inflector::camel2words($v));
    }

    protected function createMap()
    {
        $this->map = [];

        $tableNames = $this->getTableNames();

        foreach ($tableNames as $tableName) {
            $this->map[$tableName] = [];
        }
    }

    public function getTableNames()
    {
        $schema = $this->db_conn->getSchema();
        return $schema->tableNames;
    }

    protected function makeAbstractModelClasses()
    {
        $schema = $this->db_conn->getSchema();

        Console::startProgress(0, count($this->map), 'Creating abstract model classes: ', 10);
        $i = 0;

        foreach ($this->map as $tableName => $item) {
            $tableSchema = $schema->getTableSchema($tableName);
            $schemaName = $tableSchema->schemaName;

            $file = new PhpFile();
            $file->setStrictTypes();
            $file->addComment('This file is generated by ActiveRecordClassGenerator.');
            $file->addComment('Do not make changes to this file.');
            $file->addComment('Instead, modify the concrete model class.');

            $namespace = $file->addNamespace($this->baseNamespace . '\\' . $this->db . ($schemaName ? '\\' . $schemaName : '') . '\base');

            $class = $namespace->addClass($this->classify($tableSchema->name));
            $class->setAbstract();
            $class->addComment("Class " . $class->getName());
            $class->addComment("@package " . $namespace->getName());
            $class->setExtends($this->baseClass);

            $this->map[$tableName]['abstractModel'] = [];
            $this->map[$tableName]['abstractModel']['file'] = $file;
            $this->map[$tableName]['abstractModel']['namespace'] = $namespace;
            $this->map[$tableName]['abstractModel']['class'] = $class;

            $i++;
            Console::updateProgress($i, count($this->map));
        }

        Console::endProgress();
    }

    public static function classNameFilePath($className)
    {
        $className = str_replace('\\', '/', $className);
        $className = ltrim($className, '/');
        return \Yii::getAlias('@' . $className) . '.php';
    }

    private function fullyQualifiedClassName(PhpNamespace $namespace, ClassType $class)
    {
        return '\\' . $namespace->getName() . '\\' . $class->getName();
    }

    private function writeAllFiles()
    {
        Console::startProgress(0, count($this->map), 'Writing all files: ', 10);
        $i = 0;

        foreach ($this->map as $tableName => $items) {
            foreach ($items as $item) {
                $filepath = self::classNameFilePath(self::fullyQualifiedClassName($item['namespace'], $item['class']));
                FileHelper::createDirectory(dirname($filepath));

                /** @var PhpFile $file */
                $file = $item['file'];
                file_put_contents($filepath, $file->__toString());
            }

            $i++;
            Console::updateProgress($i, count($this->map));
        }

        Console::endProgress();
    }
}